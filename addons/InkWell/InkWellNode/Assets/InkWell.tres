[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://addons/InkWell/InkWellNode/Assets/Gradient.tres" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

//#############################\\

// THANKS FOR USING MY ASSET

// I'VE SPENT A LOT OF TIME WORKING ON THIS ASSET

// IF YOU WOULD LIKE TO DONATE,

// THAT WOULD BE GREATLY APPRECIATED

// https://www.paypal.me/Moonsdontburn

// THANKS, AND HAVE A GREAT DAY!

//#############################/

uniform float size_speed : hint_range(-2,2) = 0.25;
uniform float fade_speed : hint_range(1,5) = 1;
uniform vec2 circle_offset = vec2(0.5,0.5);
uniform vec4 splash_color :  hint_color = vec4(1,0.5,0.5,1);
uniform sampler2D gradient : hint_white;
uniform bool fade = true;

// will ignore \"time\" if \"loop\" is enabled.
uniform float time : hint_range(-0.5,1) = -0.25;
uniform bool loop = false;

void fragment () {
	// Circle
	vec4 col = splash_color;
	vec2 iResolution = 1.0 / TEXTURE_PIXEL_SIZE;
	vec2 uv = UV - circle_offset;
	uv.x *= (iResolution.x/iResolution.y);
	//
	float sizetime;
	float fadetime;
	
	if (loop){
		sizetime = tan(TIME);
		fadetime = sin(TIME);
	} else {
		sizetime = time;
		fadetime = time;
	}
	
	// Find the area for the circle, then turns the alpha on or off
	float d = length(uv) - (-size_speed * -sizetime * 10.);
	col.a = smoothstep(.5,.49,d);
	
	// Color 
	if (col.rgb != vec3(1)){
		col.rgb = texture(gradient, vec2(sizetime,0)).rgb;
	}
	
	// Fading, checks if it's 0 or under
	if (col.a != 0.0 && fade){
		col.a -= abs(fadetime * fade_speed);
		if (col.a < 0.0){
			col.a = 0.;
		}
	}
	
	COLOR = col;
}"

[resource]
shader = SubResource( 1 )
shader_param/size_speed = 0.25
shader_param/fade_speed = 1.0
shader_param/circle_offset = Vector2( 0.5, 0.5 )
shader_param/splash_color = Color( 1, 0.5, 0.5, 1 )
shader_param/fade = true
shader_param/time = -0.25
shader_param/loop = false
shader_param/gradient = ExtResource( 1 )
